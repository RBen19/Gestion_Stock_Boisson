package org.beni.gestionboisson.type_mouvement.database.seeders;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.beni.gestionboisson.type_mouvement.dto.TypeMouvementDTO;
import org.beni.gestionboisson.type_mouvement.service.TypeMouvementService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ApplicationScoped
public class TypeMouvementSeeder {

    private static final Logger logger = LoggerFactory.getLogger(TypeMouvementSeeder.class);

    @Inject
    private TypeMouvementService typeMouvementService;

    public void seedTypeMouvement() {
        logger.info("üîÑ D√©but du seeding des types de mouvement...");

        try {
            // V√©rifier si des donn√©es existent d√©j√†
            if (!typeMouvementService.getAllTypeMouvements().isEmpty()) {
                logger.info("‚ö†Ô∏è TypeMouvement d√©j√† pr√©sents, seeding ignor√©");
                return;
            }

            // Types de mouvements essentiels
            createTypeMouvementIfNotExists("R√©ception", "RECEPTION");
            createTypeMouvementIfNotExists("Transfert", "TRANSFERT");
            createTypeMouvementIfNotExists("Transfert Multiple", "TRANSFERT_MULTIPLE");
            createTypeMouvementIfNotExists("Sortie", "SORTIE");
            createTypeMouvementIfNotExists("Sortie √âchantillon", "SORTIE_ECHANTILLON");
            createTypeMouvementIfNotExists("Retour Fournisseur", "RETOUR_FOURNISSEUR");
            createTypeMouvementIfNotExists("Destruction", "DESTRUCTION");
            createTypeMouvementIfNotExists("Inventaire", "INVENTAIRE");
            createTypeMouvementIfNotExists("Ajustement", "AJUSTEMENT");

            logger.info("‚úÖ Seeding des TypeMouvement termin√© avec succ√®s");

        } catch (Exception e) {
            logger.error("‚ùå Erreur lors du seeding des TypeMouvement: {}", e.getMessage(), e);
            throw new RuntimeException("√âchec du seeding TypeMouvement", e);
        }
    }

    private void createTypeMouvementIfNotExists(String libelle, String code) {
        try {
            TypeMouvementDTO dto = TypeMouvementDTO.builder()
                    .libelle(libelle)
                    .code(code)
                    .build();
            
            typeMouvementService.createTypeMouvement(dto);
            logger.info("‚úì TypeMouvement cr√©√©: {} ({})", libelle, code);
            
        } catch (Exception e) {
            logger.warn("‚ö†Ô∏è TypeMouvement '{}' existe peut-√™tre d√©j√†: {}", libelle, e.getMessage());
        }
    }
}